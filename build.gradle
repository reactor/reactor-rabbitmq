/*
 * Copyright (c) 2011-2022 VMware Inc. or its affiliates, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/plugins-release" }
	}
}
plugins {
	id 'org.asciidoctor.jvm.convert' version '3.3.2' apply false
	id 'org.asciidoctor.jvm.pdf' version '3.3.2' apply false
	// applied in setup.gradle, only if artifactory credentials are configured
	id "com.jfrog.artifactory" version "4.27.1" apply false
}

ext {
	// Logging
	slf4jVersion = '1.7.36'
	logbackVersion = '1.2.10'

	// Libraries
	rabbitMqJavaClientVersion = '5.13.1'

	// Sample
	springBootVersion = '2.5.9'
	springAmqpVersion = '2.3.14'

	// Testing
	mockitoVersion = '4.3.1'
	junitPlatformVersion = '1.8.1' //TODO replace with BOM
	junitJupiterVersion  = '5.8.2'
	assertjVersion = '3.22.0'

	javadocLinks = ["https://docs.oracle.com/javase/8/docs/api/",
					"https://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/",
					"https://projectreactor.io/docs/core/release/api/",
					"https://rabbitmq.github.io/rabbitmq-java-client/api/current/",] as String[]
}

apply from: "${rootDir}/gradle/asciidoc.gradle"
apply from: "${rootDir}/gradle/releaser.gradle"

configurations.all {
	// check for snapshot updates every time
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

configure(allprojects) { project ->
	group = 'io.projectreactor.rabbitmq'

	repositories {
		mavenCentral()
		maven { url 'https://repo.spring.io/snapshot' }
	}

	apply plugin: 'eclipse'
	apply plugin: 'idea'
	apply plugin: 'java'
	apply from: "${rootDir}/gradle/setup.gradle"

	sourceCompatibility = targetCompatibility = 1.8

	if (JavaVersion.current().isJava8Compatible()) {
		compileTestJava.options.compilerArgs += "-parameters"
	}
	[compileJava, compileTestJava]*.options*.compilerArgs = ["-Xlint:varargs",
															 "-Xlint:cast",
															 "-Xlint:classfile",
															 "-Xlint:dep-ann",
															 "-Xlint:divzero",
															 "-Xlint:empty",
															 "-Xlint:finally",
															 "-Xlint:overrides",
															 "-Xlint:path",
															 "-Xlint:processing",
															 "-Xlint:static",
															 "-Xlint:try",
															 "-Xlint:deprecation",
															 "-Xlint:unchecked",
															 "-Xlint:-serial",      // intentionally disabled
															 "-Xlint:-options",     // intentionally disabled
															 "-Xlint:-fallthrough", // intentionally disabled
															 "-Xlint:-rawtypes"     // TODO enable and fix warnings
	]

	dependencies {
		implementation "io.projectreactor:reactor-core:$reactorCoreVersion"
		implementation "com.rabbitmq:amqp-client:$rabbitMqJavaClientVersion"

		// Testing
		// JUnit Jupiter API and TestEngine implementation
		testImplementation("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
		testImplementation("org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}")
		testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

		testImplementation "io.projectreactor:reactor-test:$reactorCoreVersion"
		testImplementation "org.mockito:mockito-core:$mockitoVersion"
		testImplementation "org.assertj:assertj-core:${assertjVersion}"
		testRuntimeOnly "org.slf4j:jcl-over-slf4j:$slf4jVersion"
		testRuntimeOnly "org.slf4j:slf4j-api:$slf4jVersion"
		testRuntimeOnly "ch.qos.logback:logback-classic:$logbackVersion"
	}

	// force test runs even when there are no test changes
	test.outputs.upToDateWhen { false }
}

configure(rootProject) {
	archivesBaseName = 'reactor-rabbitmq'
	description = 'Reactor RabbitMQ: A reactive API for RabbitMQ'
	apply from: "${rootDir}/gradle/javadoc.gradle"

	jar {
		manifest {
			attributes("Automatic-Module-Name": "reactor.rabbitmq",
					   "Implementation-Version": project.version)
		}
	}

	test {
		useJUnitPlatform()
		systemProperty 'rabbitmqctl.bin', System.getProperty('rabbitmqctl.bin') ?: 'DOCKER:rabbitmq'
	}

	//add specific task artifacts to the publication
	publishing.publications.mavenJava.artifact(docsZip)
}

project(':reactor-rabbitmq-samples') {
	archivesBaseName = 'reactor-rabbitmq-samples'
	description = 'Samples for Reactor RabbitMQ'

	dependencies {
		implementation rootProject
		runtimeOnly "ch.qos.logback:logback-classic:$logbackVersion"
		implementation "org.springframework.boot:spring-boot-starter:$springBootVersion"
		implementation "org.springframework.amqp:spring-rabbit:$springAmqpVersion"

		testImplementation rootProject.sourceSets.test.output
		testRuntimeOnly "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
	}

	task sender(type:JavaExec) {
		mainClass.set('reactor.rabbitmq.samples.SampleSender')
		classpath = sourceSets.main.runtimeClasspath
	}

	task receiver(type:JavaExec) {
		mainClass.set('reactor.rabbitmq.samples.SampleReceiver')
		classpath = sourceSets.main.runtimeClasspath
	}

	task springboot(type:JavaExec) {
		mainClass.set('reactor.rabbitmq.samples.SpringBootSample')
		classpath = sourceSets.main.runtimeClasspath
	}

	test {
		useJUnitPlatform()
	}
}
